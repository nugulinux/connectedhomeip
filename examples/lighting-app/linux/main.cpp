/*
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

#include "LightingAppCommandDelegate.h"
#include "LightingManager.h"
#include <AppMain.h>

#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/ConcreteAttributePath.h>
#include <app/server/Server.h>
#include <lib/support/logging/CHIPLogging.h>

#if defined(CHIP_IMGUI_ENABLED) && CHIP_IMGUI_ENABLED
#include <imgui_ui/ui.h>
#include <imgui_ui/windows/light.h>
#include <imgui_ui/windows/occupancy_sensing.h>
#include <imgui_ui/windows/qrcode.h>

#endif

using namespace chip;
using namespace chip::app;
using namespace chip::app::Clusters;

#define LAMP_ON "\e[2J" \
"\e[1;33m                                                  ██████                                                  \n" \
"                                                ██░░░░░░██                                                \n" \
"                                          ██████████████████████                                          \n" \
"                                    ░░██▓▓▒▒░░░░▒▒░░░░░░░░░░░░▒▒▓▓▓▓██                                    \n" \
"                                  ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                                  \n" \
"                                  ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██                                  \n" \
"                                  ▓▓░░░░░░░░░░░░░░      ░░░░░░░░░░░░░░██                                  \n" \
"                                  ▓▓░░░░░░░░░░░░░░      ░░░░░░░░░░░░░░██                                  \n" \
"                                  ██░░░░░░░░░░░░░░      ░░░░░░░░░░░░░░██                                  \n" \
"                                ██░░░░░░░░░░░░░░░░      ░░░░░░░░░░░░░░░░██                                \n" \
"                                ██░░░░░░░░░░░░░░░░      ░░░░░░░░░░░░░░░░██                                \n" \
"                                ██░░░░░░░░░░░░░░          ░░░░░░░░░░░░░░██                                \n" \
"                                ██░░░░░░░░░░░░░░          ░░░░░░░░░░░░░░██                                \n" \
"                              ██░░░░░░░░░░░░░░░░          ░░░░░░░░░░░░░░░░██                              \n" \
"                              ██░░░░░░░░░░░░░░░░          ░░░░░░░░░░░░░░░░██                              \n" \
"                              ██░░░░░░░░░░░░░░              ░░░░░░░░░░░░░░██                              \n" \
"                            ▓▓░░░░░░░░░░░░░░░░              ░░░░░░░░░░░░░░░░▓▓▓▓                          \n" \
"                            ██░░░░░░░░░░░░░░░░              ░░░░░░░░░░░░░░░░██▓▓                          \n" \
"                          ▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▓▓                        \n" \
"                        ██▒▒░░░░░░░░░░████▓▓▓▓░░░░▓▓▓▓▓▓██▒▒▒▒▒▒▓▓▓▓░░░░░░░░░░░░▒▒██                      \n" \
"                      ▓▓░░██▓▓██▓▓▓▓▓▓          ██▒▒▒▒▒▒██          ▓▓▓▓████████▓▓░░▓▓                    \n" \
"                      ████                      ██▒▒▒▒▒▒██                        ████                    \n" \
"                        ██▓▓▓▓▓▓▓▓▒▒▓▓▓▓██▓▓██▓▓██▒▒▒▒▒▒██▓▓▓▓▓▓██▓▓▒▒▓▓▓▓██▓▓▓▓▓▓██\e[0m                      \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██████████                                                \n" \
"                                              ██▒▒▒▒▒▒▒▒▒▒██                                              \n" \
"                                              ██▒▒▒▒▒▒▒▒▒▒██                                              \n" \
"                                                ██████████                                                \n" \
"                                                ██▓▓▓▓▓▓██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██████████                                                \n" \
"                                              ██▒▒▒▒▒▒▒▒▒▒▓▓                                              \n" \
"                                              ██▒▒▒▒░░▒▒▒▒██                                              \n" \
"                                              ██▒▒▒▒▒▒▒▒▒▒██                                              \n" \
"                                              ░░████████▓▓                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██▒▒▒▒▒▒██                                                \n" \
"                                                ██████████                                                \n" \
"                                            ████▒▒░░░░░░▒▒████                                            \n" \
"                                        ████░░██▒▒▒▒▒▒▒▒▒▒██░░████                                        \n" \
"                                    ████▒▒░░▒▒░░██████████░░▒▒░░▒▒████                                    \n" \
"                                  ██▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓                                  \n" \
"                                    ██████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██████                                    \n" \
"                                        ░░██████████████▓▓██████                                          \n" \
"  ░░░░░░                                                        ░░░░░░                                    \n" \
"  ░░  ░░  ░░░░░░░░  ░░                                                        ░░    ░░                    \n" \
"  ░░░░░░  ░░░░░░░░░░░░░░░░                                                                                \n" \
"    ░░░░    ░░                                                                ░░                          \n"

#define LAMP_OFF "\e[2J" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████████████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▓▓▒▒░░░░▒▒░░░░░░░░░░░░▒▒▓▓▓▓██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▓▓░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░██▒▒░░░░░░░░░░████▓▓▓▓░░░░▓▓▓▓▓▓██▒▒▒▒▒▒▓▓▓▓░░░░░░░░░░░░▒▒██░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░▓▓░░██▓▓██▓▓▓▓▓▓░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░▓▓▓▓████████▓▓░░▓▓░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░████░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░████░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░██▓▓▓▓▓▓▓▓▒▒▓▓▓▓██▓▓██▓▓██▒▒▒▒▒▒██▓▓▓▓▓▓██▓▓▒▒▓▓▓▓██▓▓▓▓▓▓██░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▓▓▓▓▓▓██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒▒▒▒▒▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒░░▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████████▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████▒▒░░░░░░▒▒████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████░░██▒▒▒▒▒▒▒▒▒▒██░░████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░████▒▒░░▒▒░░██████████░░▒▒░░▒▒████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████████▓▓██████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n" \
"░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░\n"

namespace {

constexpr char kChipEventFifoPathPrefix[] = "/tmp/chip_lighting_fifo_";
NamedPipeCommands sChipNamedPipeCommands;
LightingAppCommandDelegate sLightingAppCommandDelegate;
} // namespace

void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath& attributePath, uint8_t type, uint16_t size,
    uint8_t* value)
{
    printf("\nendpoint: 0x%x\tcluster: 0x%x\tattribute: 0x%X\ttype: 0x%X\tsize: %d\tvalue: %d\n",
        attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size, *value);

    // OnOff::Id == 6
    if (attributePath.mClusterId == OnOff::Id) {
        if (attributePath.mAttributeId == OnOff::Attributes::OnOff::Id) // 0
            LightingMgr().InitiateAction(*value ? LightingManager::ON_ACTION : LightingManager::OFF_ACTION);
    }
    // LevelControl::Id == 8
    else if (attributePath.mClusterId == LevelControl::Id) {
        if (attributePath.mAttributeId == LevelControl::Attributes::CurrentLevel::Id) {
            LightingMgr().SetLevel(*value);
        }
    }
}

void onActionInit(LightingManager::Action_t action)
{
    printf("\nonActionInit()\n");
}

void onActionCompleted(LightingManager::Action_t action)
{
    printf("\nonActionCompleted()\n");
    
    switch(action) {
    case LightingManager::Action_t::ON_ACTION:
        fprintf(stderr, LAMP_ON);
        break;
    case LightingManager::Action_t::OFF_ACTION:
        fprintf(stderr, LAMP_OFF);
        break;
    default:
        break;
    }
}

/** @brief OnOff Cluster Init
 *
 * This function is called when a specific cluster is initialized. It gives the
 * application an opportunity to take care of cluster initialization procedures.
 * It is called exactly once for each endpoint where cluster is present.
 *
 * @param endpoint   Ver.: always
 *
 * TODO Issue #3841
 * emberAfOnOffClusterInitCallback happens before the stack initialize the cluster
 * attributes to the default value.
 * The logic here expects something similar to the deprecated Plugins callback
 * emberAfPluginOnOffClusterServerPostInitCallback.
 *
 */
void emberAfOnOffClusterInitCallback(EndpointId endpoint)
{
    // TODO: implement any additional Cluster Server init actions
}

void ApplicationInit()
{
    std::string path = kChipEventFifoPathPrefix + std::to_string(getpid());

    if (sChipNamedPipeCommands.Start(path, &sLightingAppCommandDelegate) != CHIP_NO_ERROR)
    {
        ChipLogError(NotSpecified, "Failed to start CHIP NamedPipeCommands");
        sChipNamedPipeCommands.Stop();
    }
}

void ApplicationShutdown()
{
    if (sChipNamedPipeCommands.Stop() != CHIP_NO_ERROR)
    {
        ChipLogError(NotSpecified, "Failed to stop CHIP NamedPipeCommands");
    }
}

int main(int argc, char * argv[])
{
    if (ChipLinuxAppInit(argc, argv) != 0)
    {
        return -1;
    }

    CHIP_ERROR err = LightingMgr().Init();
    if (err != CHIP_NO_ERROR)
    {
        ChipLogError(AppServer, "Failed to initialize lighting manager: %" CHIP_ERROR_FORMAT, err.Format());
        chip::DeviceLayer::PlatformMgr().Shutdown();
        return -1;
    }

    LightingMgr().SetCallbacks(onActionInit, onActionCompleted);

#if defined(CHIP_IMGUI_ENABLED) && CHIP_IMGUI_ENABLED
    example::Ui::ImguiUi ui;

    ui.AddWindow(std::make_unique<example::Ui::Windows::QRCode>());
    ui.AddWindow(std::make_unique<example::Ui::Windows::OccupancySensing>(chip::EndpointId(1), "Occupancy"));
    ui.AddWindow(std::make_unique<example::Ui::Windows::Light>(chip::EndpointId(1)));

    ChipLinuxAppMainLoop(&ui);
#else
    ChipLinuxAppMainLoop();
#endif

    return 0;
}
